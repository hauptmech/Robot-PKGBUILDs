# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Maintainer: Guinux <nuxgui@gmail.com>
# Co-Maintainer: Clittle <philm@manjarolinux.org>

pkgbase=linux34
_xenover=2.6.2
_kernelname=-XENOMAI
_basekernel=3.4
_fullkernelver=3.4.6
_basever=34
_aufs=20120521
pkgname=('linux34-xenomai' 'linux34-headers-xenomai' "xenomai" 'linux34-api-headers-xenomai')
pkgver="${_xenover}.${_fullkernelver}"
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
#makedepends=('xmlto' 'docbook-xsl')
makedepends=()
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-${_fullkernelver}.tar.xz"
	#Xenomai files
	"http://download.gna.org/xenomai/stable/xenomai-${_xenover}.tar.bz2"
#        "ipipe-core-${_fullkernelver}-x86-2.patch"
        # the main kernel config files
        'config' 'config.x86_64' 'config.aufs'
        # standard config files for mkinitcpio ramdisk
        "linux34-xenomai.preset"
        "aufs${_basekernel}-${_aufs}.patch.bz2"
        'aufs3-base.patch'
        'aufs3-kbuild.patch'
        'aufs3-loopback.patch'
        'aufs3-proc_map.patch'
        'aufs3-standalone.patch'
)

build() {
  cd "${srcdir}/linux-${_fullkernelver}"

  if [ ! -f ../../configured ]; then
	  #Patch the kernel with xenomai first

  ${srcdir}/xenomai-${_xenover}/scripts/prepare-kernel.sh --linux=${srcdir}/linux-${_fullkernelver}/ --adeos=${srcdir}/xenomai-${_xenover}/ksrc/arch/x86/patches/ipipe-core-${_fullkernelver}-x86-2.patch



  # add aufs3 support
  patch -Np1 -i "${srcdir}/aufs${_basekernel}-${_aufs}.patch"
  patch -Np1 -i "${srcdir}/aufs3-base.patch"
  patch -Np1 -i "${srcdir}/aufs3-kbuild.patch"
  patch -Np1 -i "${srcdir}/aufs3-loopback.patch"
  patch -Np1 -i "${srcdir}/aufs3-proc_map.patch"
  patch -Np1 -i "${srcdir}/aufs3-standalone.patch"

  #Start with the Manjaro linux config files
  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  cat "${srcdir}/config.aufs" >> ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

	  touch ../../configured
  fi 
  # get kernel version
#  make prepare

  if [ -f ../../xenomai.config ]; then
    cat $srcdir/../xenomai.config > ./.config
  else
    echo "No pre-existing xenomai config"
	  # load configuration
	  # Configure the kernel. Replace the line below with one of your choice.
	  #make menuconfig # CLI menu for configuration
	  #make nconfig # new CLI menu for configuration
	  make xconfig # X-based configuration
	  #make oldconfig # using old config from previous kernel version
	  # ... or manually edit .config
    
  fi

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################
  cd "${srcdir}/linux-${_fullkernelver}"

  yes "" | make config

  # build!
  make ${MAKEFLAGS} bzImage modules
  #Build Xenomai
  cd $srcdir/xenomai-${_xenover}
  mkdir build
  cd build
  ../configure --enable-x86-sep
  make
}

package_xenomai() {
  pkgdesc="xenomai headers and binaries"
  provides=('xenomai')
  depends=('linux34-xenomai')
  conflicts=('xenomai')
  replaces=('xenomai')

  mkdir -p "${pkgdir}/usr/xenomai"
  cd "${srcdir}/xenomai-${_xenover}/build"

  make install DESTDIR="${pkgdir}"

}


package_linux34-xenomai() {
  pkgdesc="The Linux Kernel and modules"
  groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=$pkgver")
  conflicts=("linux=$pkgver")
  replaces=("linux=$pkgver")
  install=linux34-xenomai.install

  cd "${srcdir}/linux-${_fullkernelver}"

  KARCH=x86

  # get kernel version
  _kernver="$(make kernelrelease)"

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgver}-${pkgrel}-${CARCH}${_kernelname}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/RELEASE=.*/RELEASE=${pkgver}-${pkgrel}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -e  "s/KERNEL_BASE=.*/KERNEL_BASE=${_basekernel}/g" \
    -e  "s/BASEVER=.*/BASEVER=${_basever}/g" \
    -e  "s/ARCH=.*/ARCH=${CARCH}/g" \
    -i "${startdir}/${pkgname}.install"
  sed \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgver}-${pkgrel}-${CARCH}${_kernelname}\"|g" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgver}-${pkgrel}-${CARCH}${_kernelname}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgver}-${pkgrel}-${CARCH}${_kernelname}-fallback.img\"|g" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname}/version"
}

package_linux34-headers-xenomai() {
  pkgdesc="Header files and scripts for building modules for linux kernel"
  provides=("linux-headers=$pkgver")
  conflicts=("linux-headers=$pkgver")
  replaces=("linux-headers=$pkgver")

  mkdir -p "${pkgdir}/lib/modules/${_kernver}"

#Move this to install file because of archlinux relocations...
  #cd "${pkgdir}/lib/modules/${_kernver}"
  #ln -sf ../../../usr/src/linux-${_kernver} build

  cd "${srcdir}/linux-${_fullkernelver}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace video xen ipipe xenomai; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add headers for lirc package
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video"

  cp drivers/media/video/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/"

  for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/${i}"
    cp -a drivers/media/video/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core"
  cp drivers/media/dvb/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
  cp drivers/media/dvb/frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
  cp drivers/media/video/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb"
  cp drivers/media/dvb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends"
  cp drivers/media/dvb/frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners"
  cp drivers/media/common/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # fix aufs_type.h
  sed -i "s:__user::g" "${pkgdir}/usr/src/linux-${_kernver}/include/linux/aufs_type.h"

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
package_linux34-api-headers-xenomai() {

  cd ${srcdir}/linux-${_fullkernelver}
  make INSTALL_HDR_PATH=${pkgdir}/usr headers_install

  # use headers from libdrm
  rm -rf ${pkgdir}/usr/include/drm

  # clean-up unnecessary files generated during install
  find ${pkgdir} -name .install -or -name ..install.cmd | xargs rm -f


}
md5sums=('ee05aa80a4766bc1f3f2cd2bf85b6267'
         '7030aa5b65126f72e4d16ebb9877fdad'
         'cca51d30eaebae869d38d3563b2f9882'
         '007aa7a36f1b6e7a4efd278122ea9bed'
         '52f4a2c7f6277774117c834d949d6b81'
         '4ae8bc0ff29ec63f36f89c063600cebb'
         '48a7412229bd83fdc6a3a58eb72f2166'
         '4fdc9df9719506023425523eb546deef'
         '5a7862012ed96d2d6b37b94a724db8d4'
         'd84d70ea41b41a8939df954f26390c5e'
         '26622107d6248bfea86e25265f973b39'
         '32fe1c6f8071fed1ce1c3bcf0610d420')
md5sums=('4f00869aa132c884c25d4eb01fb01d5b'
         '7030aa5b65126f72e4d16ebb9877fdad'
         'cca51d30eaebae869d38d3563b2f9882'
         '007aa7a36f1b6e7a4efd278122ea9bed'
         '52f4a2c7f6277774117c834d949d6b81'
         '4ae8bc0ff29ec63f36f89c063600cebb'
         '48a7412229bd83fdc6a3a58eb72f2166'
         '4fdc9df9719506023425523eb546deef'
         '5a7862012ed96d2d6b37b94a724db8d4'
         'd84d70ea41b41a8939df954f26390c5e'
         '26622107d6248bfea86e25265f973b39'
         '32fe1c6f8071fed1ce1c3bcf0610d420')
